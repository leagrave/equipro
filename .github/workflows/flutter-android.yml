name: CI_CD_Flutter_Render

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
  workflow_dispatch:
    inputs:
      version:
        description: 'New Release'
        required: false
        default: ''
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  actions: write
  checks: write

jobs:
  setup_flutter:
    name: Setup Flutter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.8'
          channel: 'stable'

      - name: Flutter doctor
        run: flutter doctor -v

      - name: Get dependencies
        run: flutter pub get

  flutter_analyze_test:
    name: Analyze & Test
    runs-on: ubuntu-latest
    needs: setup_flutter
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.8'
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Run tests and generate JSON
        run: |
          # Exécute les tests et écrit dans test_results.ndjson
          mkdir -p test/results
          flutter test --machine test/tests/ > test/results/test_results.ndjson
          TEST_EXIT_CODE=${PIPESTATUS[0]}
          echo "Code de sortie des tests : $TEST_EXIT_CODE"
          echo "TEST_EXIT_CODE=$TEST_EXIT_CODE" >> $GITHUB_ENV

      - name: Convert NDJSON to JSON
        run: jq -s '.' test/results/test_results.ndjson > test/results/test_results.json


      - name: Create GitHub issue if tests fail
        if: env.TEST_EXIT_CODE != '0'
        run: |
          echo "Création de l'issue GitHub pour tests échoués..."
          dart scripts/create_issue.dart
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Stop workflow if tests failed
        if: env.TEST_EXIT_CODE != '0'
        run: |
          echo "Tests échoués, arrêt du workflow."
          exit 1



  build_app:
    name: Build Flutter App
    runs-on: ubuntu-latest
    needs: flutter_analyze_test
    steps:
      - uses: actions/checkout@v4

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.8'
          channel: 'stable'

      - run: flutter pub get

      - name: Decode and setup keystore
        run: |
          echo "${{ secrets.EQUIPRO_JKS_BASE64 }}" | base64 --decode > android/app/equipro.jks
          echo "storePassword=${{ secrets.STORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=equipro_alias" >> android/key.properties
          echo "storeFile=android/app/equipro.jks" >> android/key.properties

      # Build Windows executable
      - name: Build Windows
        run: flutter build windows --release

      # Build Android APK
      - name: Build Android APK
        run: flutter build apk --release

      # Build Android App Bundle (pour Google Play)
      - name: Build Android App Bundle
        run: flutter build appbundle --release

  bump_version:
    name: Bump Flutter version
    runs-on: ubuntu-latest
    needs: build_app
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get current version
        run: |
          current_version=$(grep '^version:' pubspec.yaml | awk '{print $2}' | cut -d '+' -f1)
          echo "current_version=$current_version" >> $GITHUB_ENV
          echo "Current version: $current_version"

      - name: Bump version
        run: |
          IFS='.' read -r major minor patch <<< "${{ env.current_version }}"
          case "${{ github.event.inputs.version }}" in
            patch)
              patch=$((patch + 1))
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            *)
              echo "No version bump type provided. Using patch by default."
              patch=$((patch + 1))
              ;;
          esac
          new_version="$major.$minor.$patch"
          echo "new_version=$new_version" >> $GITHUB_ENV
          echo "New version: $new_version"

      - name: Update pubspec.yaml
        run: |
          sed -i "s/^version: .*/version: ${{ env.new_version }}+1/" pubspec.yaml
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add pubspec.yaml
          git commit -m "Bump version to ${{ env.new_version }}"
          git push

  deploy_render:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: bump_version
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to Render
        env:
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          echo "Trigger deployment on Render"
          curl -X POST \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            https://api.render.com/deploy/srv-$RENDER_SERVICE_ID
